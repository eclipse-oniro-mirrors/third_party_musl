# Copyright (C) 2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#	http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
import("//build/test.gni")
import("../../../../test_template.gni")
import("test_src_adlt_tls.gni")
import("../adlt_common.gni")

group("adlt_tls_test") {
    testonly = true
    deps = []

    foreach(s, adlt_tls_test) {
        deps += [ ":${s}" ]
    }
}

config("post_lib_configs") {
    ldflags = [ "-Wl,--unresolved-symbols=ignore-all" ]
}

adlt_executable("unittest_adlt_tls_emu") {
    lib_name = "tls_emu"
    lib_include_dirs = [ "." ]
    lib_cflags = [ "-femulated-tls" ]
    lib_configs = [
        {
            name = "tls_emu_aC"
            sources = [ "a.c" ]
            cflags = [ "-pthread" ]
        },
        {
            name = "tls_emu_aCPP"
            sources = [ "a.cpp" ]
        },
    ]

    lib_common_configs = [
        ":post_lib_configs"
    ]

    sources = [ "main.cpp" ]
    external_deps = [ "bounds_checking_function:libsec_shared" ]
}

adlt_executable("unittest_adlt_tls_global_dynamic") {
    lib_name = "tls_global_dynamic"
    lib_include_dirs = [ "." ]
    lib_cflags = [ "-fno-emulated-tls", "-ftls-model=global-dynamic" ]
    lib_configs = [
        {
            name = "tls_global_dynamic_aC"
            sources = [ "a.c" ]
            cflags = [ "-pthread" ]
        },
        {
            name = "tls_global_dynamic_aCPP"
            sources = [ "a.cpp" ]
        },
    ]

    lib_common_configs = [
        ":post_lib_configs"
    ]

    sources = [ "main.cpp" ]
    external_deps = [ "bounds_checking_function:libsec_shared" ]
}

adlt_executable("unittest_adlt_tls_initial_exec") {
    lib_name = "tls_initial_exec"
    lib_include_dirs = [ "." ]
    lib_cflags = [ "-fno-emulated-tls", "-ftls-model=initial-exec" ]
    lib_configs = [
        {
            name = "tls_initial_exec_aC"
            sources = [ "a.c" ]
            cflags = [ "-pthread" ]
        },
        {
            name = "tls_initial_exec_aCPP"
            sources = [ "a.cpp" ]
        },
    ]

    lib_common_configs = [
        ":post_lib_configs"
    ]

    sources = [ "main.cpp" ]
    external_deps = [ "bounds_checking_function:libsec_shared" ]
}

adlt_executable("unittest_adlt_tls_local_dynamic") {
    lib_name = "tls_local_dynamic"
    lib_include_dirs = [ "." ]
    lib_cflags = [ "-fno-emulated-tls", "-ftls-model=local-dynamic" ]
    lib_configs = [
        {
            name = "tls_local_dynamic_aC"
            sources = [ "a.c" ]
            cflags = [ "-pthread" ]
        },
        {
            name = "tls_local_dynamic_aCPP"
            sources = [ "a.cpp" ]
        },
    ]

    lib_common_configs = [
        ":post_lib_configs"
    ]

    sources = [ "main.cpp" ]
    external_deps = [ "bounds_checking_function:libsec_shared" ]
}