# Copyright (C) 2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#	http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
import("//build/test.gni")
import("../../../../test_template.gni")
import("../adlt_common.gni")
import("test_src_adlt_bugfix.gni")

group("adlt_bugfix_test") {
    testonly = true
    deps = []

    foreach(s, adlt_bugfix_test) {
        deps += [ ":${s}" ]
    }
}

adlt_shared_library("bugfix_match_sofilename_diff") {
    include_dirs = [ "match_sofilename" ]
    lib_configs = [
        {
            name = "bugfix_match_sofilename_diff_add"
            ldflags = [ "-Wl,-soname,libadlt_bugfix_match_sofilename_diff_add.1.0.0.so" ]
            sources = [ "match_sofilename/add.cpp" ]
        },
        {
            name = "bugfix_match_sofilename_diff_sub"
            ldflags = [ "-Wl,-soname,libadlt_bugfix_match_sofilename_diff_sub.1.0.0.so" ]
            sources = [ "match_sofilename/sub.cpp" ]
        }
    ]
}

ohos_executable("unittest_adlt_bugfix_match_sofilename_diff_dep") {
    testonly = true
    subsystem_name = "musl"
    part_name = "libc-test"
    configs = [ "//third_party/musl/libc-test/src/common:config_runtest" ]

    include_dirs = [
        "//third_party/musl/libc-test/src/functionalext/adlt/common",
        "//third_party/musl/libc-test/src/functionalext/common",
        "//third_party/musl/porting/linux/user/include",
        "//third_party/musl/libc-test/src/common",
        "match_sofilename"
    ]

    sources = [ "match_sofilename/main_dep.cpp" ]
    ldflags = [ "-Wl,-rpath=./:/data/local/tmp/libc-test-lib/" ]
    deps = [ "../:adlt_common", ":bugfix_match_sofilename_diff",
    ":bugfix_match_sofilename_diff_add", ":bugfix_match_sofilename_diff_sub" ]
}

ohos_executable("unittest_adlt_bugfix_match_sofilename_diff_dlopen") {
    testonly = true
    subsystem_name = "musl"
    part_name = "libc-test"
    configs = [ "//third_party/musl/libc-test/src/common:config_runtest" ]

    include_dirs = [
        "//third_party/musl/libc-test/src/functionalext/adlt/common",
        "//third_party/musl/libc-test/src/functionalext/common",
        "//third_party/musl/porting/linux/user/include",
        "//third_party/musl/libc-test/src/common",
        "match_sofilename"
    ]

    sources = [ "match_sofilename/main_dlopen.cpp" ]
    cflags = [ "-DSO_TYPE_TAG=diff" ]
    ldflags = [ "-Wl,-rpath=./:/data/local/tmp/libc-test-lib/" ]
    deps = [ "../:adlt_common", ":bugfix_match_sofilename_diff" ]
    data_deps = [ ":bugfix_match_sofilename_diff_add", ":bugfix_match_sofilename_diff_sub" ]
}

action("unittest_adlt_bugfix_match_sofilename_diff") {
    testonly = true
    deps = [
        ":unittest_adlt_bugfix_match_sofilename_diff_dep",
        ":unittest_adlt_bugfix_match_sofilename_diff_dlopen",
    ]

    script = "../adlt_tools.py"
    args = [ "build_sym_links",
        "--lib-dir", rebase_path(adlt_lib_dir, ""),
        "--target-lib-dir", adlt_target_lib_dir,
        "--adlt-lib", "libadlt_bugfix_match_sofilename_diff.so",
        "--orig-lib-list",
            "libadlt_bugfix_match_sofilename_diff_add.so",
            "libadlt_bugfix_match_sofilename_diff_sub.so",
    ]

    outputs = [
        "$adlt_lib_dir/adlt_orig_libs/libadlt_bugfix_match_sofilename_diff_add.so",
        "$adlt_lib_dir/adlt_orig_libs/libadlt_bugfix_match_sofilename_diff_sub.so",
    ]
}

adlt_shared_library("bugfix_match_sofilename_same") {
    include_dirs = [ "match_sofilename" ]
    lib_configs = [
        {
            name = "bugfix_match_sofilename_same_add"
            sources = [ "match_sofilename/add.cpp" ]
        },
        {
            name = "bugfix_match_sofilename_same_sub"
            sources = [ "match_sofilename/sub.cpp" ]
        }
    ]
}

ohos_executable("unittest_adlt_bugfix_match_sofilename_same_dep") {
    testonly = true
    subsystem_name = "musl"
    part_name = "libc-test"
    configs = [ "//third_party/musl/libc-test/src/common:config_runtest" ]

    include_dirs = [
        "//third_party/musl/libc-test/src/functionalext/adlt/common",
        "//third_party/musl/libc-test/src/functionalext/common",
        "//third_party/musl/porting/linux/user/include",
        "//third_party/musl/libc-test/src/common",
        "match_sofilename"
    ]

    sources = [ "match_sofilename/main_dep.cpp" ]
    ldflags = [ "-Wl,-rpath=./:/data/local/tmp/libc-test-lib/" ]
    deps = [ "../:adlt_common", ":bugfix_match_sofilename_same",
    ":bugfix_match_sofilename_same_add", ":bugfix_match_sofilename_same_sub" ]
}

ohos_executable("unittest_adlt_bugfix_match_sofilename_same_dlopen") {
    testonly = true
    subsystem_name = "musl"
    part_name = "libc-test"
    configs = [ "//third_party/musl/libc-test/src/common:config_runtest" ]

    include_dirs = [
        "//third_party/musl/libc-test/src/functionalext/adlt/common",
        "//third_party/musl/libc-test/src/functionalext/common",
        "//third_party/musl/porting/linux/user/include",
        "//third_party/musl/libc-test/src/common",
        "match_sofilename"
    ]

    sources = [ "match_sofilename/main_dlopen.cpp" ]
    cflags = [ "-DSO_TYPE_TAG=same" ]
    ldflags = [ "-Wl,-rpath=./:/data/local/tmp/libc-test-lib/" ]
    deps = [ "../:adlt_common", ":bugfix_match_sofilename_same" ]
    data_deps = [ ":bugfix_match_sofilename_same_add", ":bugfix_match_sofilename_same_sub" ]
}

action("unittest_adlt_bugfix_match_sofilename_same") {
    testonly = true
    deps = [
        ":unittest_adlt_bugfix_match_sofilename_same_dep",
        ":unittest_adlt_bugfix_match_sofilename_same_dlopen",
    ]

    script = "../adlt_tools.py"
    args = [ "build_sym_links",
        "--lib-dir", rebase_path(adlt_lib_dir, ""),
        "--target-lib-dir", adlt_target_lib_dir,
        "--adlt-lib", "libadlt_bugfix_match_sofilename_same.so",
        "--orig-lib-list",
            "libadlt_bugfix_match_sofilename_same_add.so",
            "libadlt_bugfix_match_sofilename_same_sub.so",
    ]

    outputs = [
        "$adlt_lib_dir/adlt_orig_libs/libadlt_bugfix_match_sofilename_same_add.so",
        "$adlt_lib_dir/adlt_orig_libs/libadlt_bugfix_match_sofilename_same_sub.so",
    ]
}

adlt_executable("unittest_adlt_bugfix_repeated_relocation") {
    lib_name = "bugfix_repeated_relocation"
    lib_include_dirs = [ "repeated_relocation" ]
    lib_configs = [
        {
            name = "bugfix_repeated_relocation_liba"
            sources = [ "repeated_relocation/liba.c" ]
            deps = [ ":bugfix_repeated_relocation_liba1" ]
        },
        {
            name = "bugfix_repeated_relocation_liba1"
            sources = [ "repeated_relocation/liba1.c" ]
        },
        {
            name = "bugfix_repeated_relocation_libb"
            sources = [ "repeated_relocation/libb.c" ]
            deps = [ ":bugfix_repeated_relocation_libb1" ]
        },
        {
            name = "bugfix_repeated_relocation_libb1"
            sources = [ "repeated_relocation/libb1.c" ]
        },
    ]

    include_dirs = [ "repeated_relocation" ]
    sources = [ "repeated_relocation/main.cpp" ]
    custom_deps = [ ":bugfix_repeated_relocation", ":bugfix_repeated_relocation_liba", ":bugfix_repeated_relocation_libb" ]
}

ohos_shared_library("bugfix_sym_conflict_add") {
    output_name = "libadlt_bugfix_sym_conflict_add"
    output_extension = "so"

    subsystem_name = "musl"
    part_name = "libc-test-lib"
    testonly = true

    include_dirs = [ "sym_conflict" ]
    sources = [ "sym_conflict/add.cpp" ]
    deps = [ "../:adlt_common", ]
}

adlt_executable("unittest_adlt_bugfix_sym_conflict") {
    lib_name = "bugfix_sym_conflict"
    lib_include_dirs = [ "sym_conflict" ]
    lib_configs = [
        {
            name = "bugfix_sym_conflict_sub"
            sources = [ "sym_conflict/sub.cpp" ]
        },
        {
            name = "bugfix_sym_conflict_fakeadd"
            sources = [ "sym_conflict/fakeadd.cpp" ]
        }
    ]

    include_dirs = [ "sym_conflict" ]
    sources = [ "sym_conflict/main.cpp" ]
    custom_deps = [ ":bugfix_sym_conflict", ":bugfix_sym_conflict_sub", ":bugfix_sym_conflict_add" ]
}